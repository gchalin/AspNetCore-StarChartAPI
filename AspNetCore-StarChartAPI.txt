__Note:__ this isnt the only way to accomplish this, however; this is what the projects tests are expecting. Implementing this in a different way will likely result in being marked as incomplete / incorrect.
=====================================================================================
2-Add and Configure Middleware in Startup.cs
=====================================================================================
- [X] Adding Middleware/Configuration to `Startup.cs`
  - [X] In the ConfigureServices method call the AddMvc method on services to add support for MVC middleware.
  - [X] In the ConfigureServices method call AddDbContext<ApplicationDbContext> on services with the argument options => options.UseInMemoryDatabase("StarChart") to point EntityFramework to the applications DbContext. (Note: You will need to add a using directives for StarChart.Data and Microsoft.EntityFrameworkCore)
  - [X] In the Configure method add a call to UseMvc method on app.
=====================================================================================
3-Crreate CelestialObject Model
===================================================================================== 
- [X] Create CelestialObject Model
  - [X] Create a new public class CelestialObject in the Models directory
  - [X] Create a new public property of type int named Id.
  - [X] Create a new public property of type string named Name. This property should have the Required attribute. (Note: you will need to add a using directive for Systems.ComponentModel.DataAnnotations)
  - [X] Create a new public property of type int? named OrbitedObjectId.
  - [X] Create a new public property of type List<CelestialObject> named Satellites. This property should have the NotMapped attribute. (Note: you will need to add using directives for System.Collections.Generic and System.ComponentModels.DataAnnotations.Schema)
  - [X] Create a new public property of type TimeSpan named OrbitalPeriod.
  - [X] In the ApplicationDbContext class, located in the Data folder, create a new public property of type DbSet<CelestialObject> named CelestialObjects. (Note: you will need to add a using directive for StarChart.Models)
  incorrect.
=====================================================================================
4-Create CelestialObjectController class
=====================================================================================
- [X] Create CelestialObjectController class
  - [X] Create a new class CelestialObjectController in the Controllers folder that inherits the ControllerBase class. If any actions are automatically generated they should be removed. (Note: you will need to add a using directive for Microsoft.AspNetCore.Mvc)
  - [X] Add a Route attribute with a value of "" and ApiController attribute to the CelestialObjectController.
  - [X] Create a new private readonly field of type ApplicationDbContext named _context. (Note: you will need to add a using directive for StarChart.Data)
  - [X] Create a constructor that accepts a parameter of type ApplicationDbContext and sets the _context field using the provided parameter.
=====================================================================================
5-Create CelestialObjectController's Get Actions
=====================================================================================
- [ ] Create all CelestialObjectControllers Get actions
  - [ ] Create a new method GetById 
    - This method should have a return type of IActionResult 
    - This method should accept a parameter of type int named id. 
    - This method should have an HttpGet attribute with an value of "{id:int}" and the Name property set to "GetById". 
    - This method should return NotFound there is no CelestialObject with an Id property that matches the parameter.
    - This method should also set the Satellites property to any CelestialObjects whos OrbitedObjectId is the current CelestialObjects Id.
    - This method should return an Ok with a value of the CelestialObject whos Id property matches the id parameter.
  - [ ] Create the GetByName method
    - This method should have a return type of IActionResult 
    - This method should accept a parameter of type string named name. 
    - This method should have an HttpGet attribute with a value of "{name}".
    - This method should return NotFound there is no CelestialObject with an Name property that matches the name parameter.
    - This method should also set the Satellites property for each CelestialObject whos OrbitedObjectId is the current CelestialObjects Id.
    - This method should return an Ok with a value of the list of CelestialObject whos Name property matches the name parameter.
  - [ ] Create the GetAll method
    - This method should have a return type of IActionResult.
    - This method should also set the Satellites property for each of the CelestialObjects returned.
    - This method should have an HttpGet attribute. 
    - This method should return Ok with a value of all CelestialObjectss.
=====================================================================================
6-Create CelestialObjectController's Post, Put, Patch, and Delete Actions
=====================================================================================
- [ ] Create CelestialObjectControllerss Post, Put, Patch, and Delete actions
  - [ ] Create the Create method
    - This method should have a return type of IActionResult .
    - This method should accept a parameter of type [FromBody]CelestialObject. (Note: You will need to add a using directive for StarChart.Models) 
    - This method should have an HttpPost attribute. 
    - This method should add the provided CelestialObject to the CelestialObjects DbSet then SaveChanges.
    - This method should return a CreatedAtRoute with the arguments 
      - "GetById"
      - A new object with an id of the CelestialObjects Id (note: use the new { } format)
      - The newly created CelestialObject.
  - [ ] Create the Update method
    - This method should have a return type of IActionResult .
    - This method should accept a parameter of type int named id and a parameter of type CelestialObject. 
    - This method should have the HttpPut attribute with a value of "{id}".
    - This method should locate the CelestialObject with an Id that matches the provided int parameter. 
      - If no match is found return NotFound.
      - If a match is found set its Name, OrbitalPeriod, and OrbitedObjectId properties based on the provided CelestialObject parameter. Call Update on the CelestialObjects DbSet with an argument of the updated CelestialObject, and then call SaveChanges.
    - This method should return NoContent.
  - [ ] Create the RenameObject method
    - This method should have a return type of IActionResult.
    - This method should accept a parameter of type int named id and a parameter of type string named name. 
    - This method should have the HttpPatch attribute with an argument of "{id}/{name}". 
    - This method should locate the CelestialObject with an Id that matches the provided int parameter. 
      - If no match is found return NotFound.
      - If a match is found set its Name property to the provided name parameter. Then call Update on the CelestialObjects DbSet with an argument of the updated CelestialObject, and then call SaveChanges.
    - This method should return NoContent.
  - [ ] Create the Delete method
    - This method should have a return type of IActionResult 
    - This method should accept a parameter of type int named id. 
    - This method should have the HttpDelete attribute with an argument of "{id}".
    - This method should get a List of all CelestialObjects who either have an Id or OrbitedObjectIdthat matches the provided parameter. 
      - If there are no matches it should return NotFound.
      - If there are matching CelestialObjects call RemoveRange on the CelestialObjects DbSet with an argument of the list of matching CelestialObjects. Then call SaveChanges.
    - This method should return NoContent.
    